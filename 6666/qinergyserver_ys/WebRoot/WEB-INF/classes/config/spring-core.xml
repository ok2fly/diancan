<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache" 
	xmlns:task="http://www.springframework.org/schema/task"  
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/beans  
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
  http://www.springframework.org/schema/tx   
  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  http://www.springframework.org/schema/aop
  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
  http://www.springframework.org/schema/context  
   http://www.springframework.org/schema/context/spring-context-3.0.xsd  
   http://www.springframework.org/schema/util  
     http://www.springframework.org/schema/util/spring-util-3.0.xsd  
 http://www.springframework.org/schema/cache    
 http://www.springframework.org/schema/cache/spring-cache.xsd 
 http://www.springframework.org/schema/task 
 http://www.springframework.org/schema/task/spring-task-3.0.xsd" default-lazy-init="false">

	<!-- 数据库资源文件-->
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入-->
	<context:property-placeholder location="classpath:config/conf.properties" />
<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		数据库驱动
		<property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.web.url}" />
        <property name="user" value="${jdbc.web.username}" />
        <property name="password" value="${jdbc.web.password}" />
		
		指定连接数据库连接池的最大连接数
		<property name="maxPoolSize">
			<value>${maxPoolSize}</value>
		</property>
		指定连接数据库连接池的最小连接数
		<property name="minPoolSize">
			<value>${minPoolSize}</value>
		</property>
		指定连接数据库连接池的初始化连接数
		<property name="initialPoolSize">
			<value>${initialPoolSize}</value>
		</property>
		指定连接数据库连接池的连接的最大空闲时间 单位秒
		<property name="maxIdleTime">
			<value>${maxIdleTime}</value>
		</property>
	</bean> -->
	
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据库驱动 -->
        <property name="url" value="${jdbc.web.url}" />
        <property name="username" value="${jdbc.web.username}" />
        <property name="password" value="${jdbc.web.password}" />
 		<property name = "filters" value = "wall,stat" />    
         
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxActive">
			<value>${maxPoolSize}</value>
		</property>
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minIdle">
			<value>${minPoolSize}</value>
		</property>
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialSize">
			<value>${initialPoolSize}</value>
		</property>
		<!-- 指定连接数据库连接池的连接的最大空闲时间 单位秒 -->
		<property name="maxWait">
			<value>${maxIdleTime}</value>
		</property>
	</bean>

	<!-- 将数据源交给事物管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- 将数据源 交给 SqlSessionFactoryBean-->
	<bean id="sqlMapClient" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.qinergy.dto" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:mybatis/**/*Mapper.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 通过SqlSessionFactoryBean  获取SqlSessionTemplate -->
	<!-- 获取mybatis的工具类 -->
	<bean id="SqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlMapClient" />
	</bean>

	<!-- 扫描所有的组件 -->
	<context:component-scan base-package="com.qinergy.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<context:annotation-config />  
	
	<!-- 注册Spring工具类 -->
    <bean id="springContextUtil" class="com.qinergy.util.SpringContextUtil"></bean>

    <!-- spring扫描注解的配置   -->  

    <context:component-scan base-package="com.qinergy.task" />

	<!-- 开启这个配置，spring才能识别@Scheduled注解   -->  

    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>  

    <task:scheduler id="qbScheduler" pool-size="10"/>  
	
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0"></property>
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
			</list>
		</property>
	</bean>
	
	<!-- 引用ehCache的配置 --> 
    <bean id="cacheManagerFactory"  
        class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"  
        p:configLocation="classpath:config/ehcache.xml">
    </bean>  
      
	<!-- 定义ehCache的工厂，并设置所使用的Cache name -->    
	<bean id="loginCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">    
		<property name="cacheManager">    
			<ref local="cacheManagerFactory"/>    
		</property>    
		<property name="cacheName">    
			<value>loginCache</value>    
		</property>    
	</bean>           
	<bean id="tmpCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">    
		<property name="cacheManager">    
			<ref local="cacheManagerFactory"/>    
		</property>    
		<property name="cacheName">    
			<value>tmpCache</value>    
		</property>    
	</bean>
	
	
		<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
      <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <property name="defaultEncoding" value="UTF-8" />
         <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
          <property name="maxUploadSize" value="-1" />
      </bean>
      
      <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
     <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
     <bean id="exceptionResolver"
         class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
         <property name="exceptionMappings">
             <props>
                 <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到XXX页面 -->
                 <prop
                     key="org.springframework.web.multipart.MaxUploadSizeExceededException">/WEB-INF/project/error/500.html</prop>
             </props>
         </property>
     </bean>
</beans>
