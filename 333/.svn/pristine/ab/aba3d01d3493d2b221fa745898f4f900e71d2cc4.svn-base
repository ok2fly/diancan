package com.gcfd.consumer;

import com.alibaba.fastjson.JSON;
import com.gcfd.common.Constant;
import com.gcfd.common.DataCenter;
import com.gcfd.common.EnumNetCode;
import com.gcfd.common.util.JedisUtil;
import com.gcfd.common.util.TokenUtil;
import com.gcfd.common.util.webUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import redis.clients.jedis.Jedis;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;


/**
* @类名：ServletFilter.java
* @作者：one
* @时间：2016年6月19日 上午10:48:05
* @版权：pengkaione@icloud.com
* @描述： 
*/
public class ServletFilter implements Filter {
	
	private static final Logger logger = LoggerFactory.getLogger(ServletFilter.class);

	
	@Override
	public void destroy() {
		// TODO Auto-generated method stub
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException{
		// TODO Auto-generated method stub
		HttpServletRequest httpServletRequest = (HttpServletRequest) request;
		HttpServletResponse httpServletResponse = (HttpServletResponse) response;
		httpServletResponse.setCharacterEncoding("UTF-8");
		long b = System.currentTimeMillis();
		//SSL  过滤   ssl 的请求访问，由nginx 服务来保证绝对的ssl ,此处ssl 检查代码去除
    	//接口访问过滤 //URL
        String path = httpServletRequest.getRequestURI();

        try{

	        //统一过滤方法
			if(! _interface(httpServletRequest,httpServletResponse,path)){
				printERROR(httpServletResponse);
				return;
			}
			chain.doFilter(httpServletRequest, httpServletResponse);
		    long e = System.currentTimeMillis();
		    logger.info("网络请求:【{}】 接口耗时:【{}】  ------------------------------",path,e - b);
		}catch(Exception e){
			 logger.error("网络请求:【{}】 异常  ------------------------------",path);
		}
	}

	@Override
	public void init(FilterConfig arg0) throws ServletException {
		// TODO Auto-generated method stub
	}
	
	/**
	 * 接口在案判断
	 * @param response
	 * @param path
	 * @return
	 * @throws IOException 
	 * @throws ServletException 
	 */
	private boolean _interface(HttpServletRequest request, HttpServletResponse response, String path) throws ServletException, IOException{

		return true;
//		if("/gcfdHt/htServer/htLogin/authcCreateTicket".equals(path)
//				|| path.indexOf("/gcfdHt/htServer/htLogin/ticketLogin") >= 0
//				){
//			return true;
//		}
//
//		String token = request.getHeader("Token");
// 		return isLogin(request,response,token);
	}
	
	/**
	 * 非自动过滤类接口
	 * @param request
	 * @param response
	 * @param token
	 * @return
	 * @throws IOException 
	 * @throws ServletException 
	 * @throws Exception
	 */
	public static boolean isLogin(HttpServletRequest request,HttpServletResponse response,String token) throws ServletException, IOException{
   		if(token==null||"".equals(token)||"null".equals(token)){
			//token 为空直接回首页
			response.setHeader("REDIRECTURL", "login.html");
			return false;
    	}else{
    		logger.debug(" 来自IP: 【{}】  请求 token: 【{}】 ------------------------------", webUtil.getIpAddr(request),token);
    		String tokenT = TokenUtil.decryptToken(token);
    		if(!"-1".equals(tokenT)&&!"0".equals(tokenT)){
    			try(Jedis jedis = JedisUtil.getJedisConnection(Constant.SESSION_DB)){
    				String user = jedis.get(tokenT);
    				if(user!=null){
    					jedis.expire(tokenT, Constant.SESSION_TIME);
    					request.setAttribute("_sysUser", user);
    					//定义新的token
    					response.setHeader("Token", TokenUtil.getToken(tokenT, Constant.SESSION_TIME));
    				}else{
    					//token为有效但是，无登录信息
    					response.setHeader("REDIRECTURL", "login.html");
    					logger.debug(" 来自IP: 【{}】    异常提示：【{}】 ------------------------------", webUtil.getIpAddr(request),"无登录信息在 redis");
    				}
    			}catch (Exception e) {
    				printERROR(response);
    			}
    		}else{
    			//token无效
    			response.setHeader("REDIRECTURL", "login.html");
				logger.debug(" 来自IP: 【{}】    异常提示：【{}】 ------------------------------", webUtil.getIpAddr(request),"Token  无效");
				return false;
    		}
    	}
		return true;
	}
	/**
	 * 网络异常反馈
	 * @param response
	 * @throws IOException
	 */
	public static void printERROR(HttpServletResponse response) throws IOException{
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		PrintWriter pr = response.getWriter();
		response.setContentType("");
		DataCenter<Object> rt = new DataCenter<Object>();
		rt.setNetCode(EnumNetCode.C2003);
		pr.write(JSON.toJSONString(rt));
	}
}
