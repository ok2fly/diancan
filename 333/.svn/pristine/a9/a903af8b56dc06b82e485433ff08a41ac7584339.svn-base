package com.gcfd.service.contorller;


import com.gcfd.common.DataCenter;
import com.gcfd.common.EnumNetCode;
import com.gcfd.common.util.ConnectionFactory;
import com.gcfd.common.util.UUIDUtil;
import com.gcfd.storage.dao.*;
import com.gcfd.storage.entity.*;

import java.math.BigDecimal;
import java.util.*;
import org.apache.ibatis.session.SqlSession;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * 智慧云餐厅消费场景
 */
@RestController
@RequestMapping(value = "/service/scr/scence/consume")
public class ScrScenceConsumeController {


    private static final Logger logger = LoggerFactory.getLogger(ScrScenceConsumeController.class);

    /**
     * 根据桌号获得用户标示和当前桌的订单信息
     * @param branchId
     * @param tableNo
     * @return
     */
    @RequestMapping(value = "/getUserSignAndOrderInfo/{branchId}/{tableNo}",method = RequestMethod.GET)
    public DataCenter<Object> getUserSignAndOrderInfo(@PathVariable("branchId") String branchId,@PathVariable("tableNo") String tableNo){
        //实例化返回参数
        DataCenter<Object> netData = new DataCenter<Object>();
        SqlSession sqlsession = null;
        try{
            OrderInfo orderInfo = new OrderInfo();
            String userSign = null;
             //检查当前桌号是否有未完成的订单，若有，返回userId
            sqlsession = ConnectionFactory.getSessionFactory(branchId).openSession();
            OrderMapper orderMapper = sqlsession.getMapper(OrderMapper.class);
            Order order = orderMapper.selectByBranchIdAndTableNo(branchId,tableNo);
            if(order != null){
                userSign =  order.getClientId();
                //根据orderId获得订单配送信息
                OrderDispatchingMapper orderDispatchingMapper = sqlsession.getMapper(OrderDispatchingMapper.class);
                orderInfo.setOrderDispatching(orderDispatchingMapper.getOrderDispatchingInfo(order.getOrderNo()));
                //根据orderId获得订单产品信息
                OrderProductDetailMapper orderProductDetailMapper = sqlsession.getMapper(OrderProductDetailMapper.class);
                orderInfo.setOrderProductDetailList(orderProductDetailMapper.getOrderProductList(order.getOrderNo()));
                //根据orderId获得订单费用信息
                OrderFeeDetailMapper orderFeeDetailMapper = sqlsession.getMapper(OrderFeeDetailMapper.class);
                orderInfo.setOrderFeeDetailList(orderFeeDetailMapper.getOrderFeeList(order.getOrderNo()));
                //此时没有支付信息，不获取支付信息
            }else{
                userSign = UUIDUtil.getUUID32();
            }
            orderInfo.setUserSign(userSign);
            netData.setData(orderInfo);
            netData.setNetCode(EnumNetCode.Q1001);
        }catch (Exception e) {
            netData.setNetCode(EnumNetCode.Q1002);
            logger.error("发生异常，异常信息如下：" + e.getLocalizedMessage());
            e.printStackTrace();
        }finally {
            if(sqlsession != null){
                sqlsession.close();
            }
        }
        return netData;
    }

    /**
     * 获取机构的详细信息
     * @param branchId
     * @return
     */
    @RequestMapping(value = "/getBranchInfo/{branchId}",method = RequestMethod.GET)
    public DataCenter<Object> getBranchInfo(@PathVariable("branchId") String branchId) {
        //实例化返回参数
        DataCenter<Object> netData = new DataCenter<Object>();
        SqlSession sqlsession = null;
        try{
            sqlsession = ConnectionFactory.getSessionFactory(branchId).openSession();
            SysBranchMapper sysBranchMapper = sqlsession.getMapper(SysBranchMapper.class);
            SysBranch sysBranch = sysBranchMapper.selectByBranchId(branchId);
            netData.setData(sysBranch);
            netData.setNetCode(EnumNetCode.Q1001);
        }catch (Exception e) {
            netData.setNetCode(EnumNetCode.Q1002);
            logger.error("发生异常，异常信息如下：" + e.getLocalizedMessage());
            e.printStackTrace();
        }finally {
            if(sqlsession != null){
                sqlsession.close();
            }
        }
        return netData;
    }

    /**
     * 获取机构的活动信息
     * @param branchId
     * @return
     */
    @RequestMapping(value = "/getBranchActivityInfo/{branchId}",method = RequestMethod.GET)
    public DataCenter<Object> getBranchActivityInfo(@PathVariable("branchId") String branchId) {
        //实例化返回参数
        DataCenter<Object> netData = new DataCenter<Object>();
        SqlSession sqlsession = null;
        try{
            sqlsession = ConnectionFactory.getSessionFactory(branchId).openSession();
            ActivityMapper activityMapper = sqlsession.getMapper(ActivityMapper.class);
            List<Activity> activityList = activityMapper.getCurActivity(branchId);
            netData.setData(activityList);
            netData.setNetCode(EnumNetCode.Q1001);
        }catch (Exception e) {
            netData.setNetCode(EnumNetCode.Q1002);
            logger.error("发生异常，异常信息如下：" + e.getLocalizedMessage());
            e.printStackTrace();
        }finally {
            if(sqlsession != null){
                sqlsession.close();
            }
        }
        return netData;
    }

    /**
     * 获得机构的菜单信息
     * @param branchId
     * @param keyWords
     * @return
     */
    @RequestMapping(value = "/getProductMenu/{branchId}/{keyWords}",method = RequestMethod.GET)
    public DataCenter<Object> getProductMenu(@PathVariable("branchId") String branchId,@PathVariable("keyWords") String keyWords){
        //实例化返回参数
        DataCenter<Object> netData = new DataCenter<Object>();
        SqlSession sqlsession = null;
        try{
            sqlsession = ConnectionFactory.getSessionFactory(branchId).openSession();
            //获得机构的产品信息
            ProductMapper productMapper = sqlsession.getMapper(ProductMapper.class);
            if("ALL".equals(keyWords)){
                keyWords = null;
            }
            List<Product> productList = productMapper.getBranchProductList(branchId,keyWords == null ? null : keyWords.trim());
            //获得机构产品的定价信息
            ProductPriceMapper productPriceMapper = sqlsession.getMapper(ProductPriceMapper.class);
            List<ProductPrice> productPriceList = productPriceMapper.getBranchProfuctPriceList();
            //构建菜单
            netData.setData(generateMenu(productList,productPriceList));
            netData.setNetCode(EnumNetCode.Q1001);
        }catch (Exception e) {
            netData.setNetCode(EnumNetCode.Q1002);
            logger.error("发生异常，异常信息如下：" + e.getLocalizedMessage());
            e.printStackTrace();
        }finally {
            if(sqlsession != null){
                sqlsession.close();
            }
        }
        return netData;
    }


    /**
     * 构建菜单，考虑产品的区间定价
     * @param productList
     * @param productPriceList
     * @return
     */
    private List<ProductMenuInfo> generateMenu(List<Product> productList,List<ProductPrice> productPriceList){
       List<ProductMenuInfo> productMenuInfoList = new ArrayList<ProductMenuInfo>();
       //1.将产品价格清单列表转换为list
        Map<Integer,List<ProductPrice>> productPriceMap = new HashMap<Integer,List<ProductPrice>>();
        for (ProductPrice productPrice:productPriceList){
            if(productPriceMap.get(productPrice.getProductId()) == null){
                productPriceMap.put(productPrice.getProductId(),new ArrayList<ProductPrice>());
            }
            productPriceMap.get(productPrice.getProductId()).add(productPrice);
        }
        //遍历产品列表构建完整产品信息
        Integer counter;
        for (Product product:productList) {
            counter = 1;
            List<ProductPrice> productPriceListTemp = productPriceMap.get(product.getId());
            if(productPriceListTemp != null && productPriceListTemp.size() > 0) {
                for (int i = 0; productPriceListTemp != null && i < productPriceListTemp.size() && counter < product.getMaxAmount(); i++) {
                    //如果计数器小于价格数量区间构建区间之下的价格
                    if (productPriceListTemp.get(i).getStartAmount() > counter) {
                        int startAmount = counter.intValue();
                        if (productPriceListTemp.get(i).getStartAmount() <= product.getMaxAmount()) {
                            counter = productPriceListTemp.get(i).getStartAmount() - 1;
                        } else {
                            counter = product.getMaxAmount();
                        }
                        productMenuInfoList.add(generateMenuInfo(product,startAmount,counter.intValue(),product.getProdcutPrice()));
                    }
                    //如果数量达到上线，退出本产品价格的区间构建
                    if (counter == product.getMaxAmount()) {
                        continue;
                    }
                    //构建价格区间内的价格
                    if (productPriceListTemp.get(i).getEndAmount() <= product.getMaxAmount()) {
                        counter = productPriceListTemp.get(i).getEndAmount();
                    } else {
                        counter = product.getMaxAmount();
                    }
                    productMenuInfoList.add(generateMenuInfo(product,productPriceListTemp.get(i).getStartAmount().intValue(),counter.intValue(),productPriceListTemp.get(i).getPrice()));
                    counter++;
                }
                //循环完还没有到上限
                if(counter < product.getMaxAmount()){
                    productMenuInfoList.add(generateMenuInfo(product,counter.intValue(),product.getMaxAmount().intValue(),product.getProdcutPrice()));
                }
            }else{
                //没有特殊定价，以原价为最终定价
                productMenuInfoList.add(generateMenuInfo(product,1,product.getMaxAmount().intValue(),product.getProdcutPrice()));
            }

        }
        return productMenuInfoList;
    }

    /**
     * 构建菜单
     * @param product
     * @param startAmount
     * @param endAmount
     * @param realPrice
     * @return
     */
    private ProductMenuInfo generateMenuInfo(Product product, int startAmount, int endAmount, BigDecimal realPrice){
        ProductMenuInfo productMenuInfo = new ProductMenuInfo();
        productMenuInfo.setStartAmount(startAmount);
        productMenuInfo.setEndAmount(endAmount);
        productMenuInfo.setProdcutRealPrice(realPrice);
        productMenuInfo.setId(product.getId());
        productMenuInfo.setIsPreferentialInOrder(product.getIsPreferentialInOrder());
        productMenuInfo.setProductAttributeType(product.getProductAttributeType());
        productMenuInfo.setProductBussinessType(product.getProductBussinessType());
        productMenuInfo.setProdcutPrice(product.getProdcutPrice());
        productMenuInfo.setProductDesc(product.getProductDesc());
        productMenuInfo.setProductName(product.getProductName());
        productMenuInfo.setProductNo(product.getProductNo());
        productMenuInfo.setProductSpecification(product.getProductSpecification());
        productMenuInfo.setProductUnit(product.getProductUnit());
        productMenuInfo.setProductAttributeTypeName(product.getProductAttributeTypeName());
        return productMenuInfo;
    }
}
